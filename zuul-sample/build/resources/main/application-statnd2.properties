#### Instance env settings
#
region=us-east-1
environment=test
eureka.validateInstanceId=false
#
#### Eureka instance registration for this app
#
##Name of the application to be identified by other services
eureka.name=zuul
#
##The port where the service will be running and serving requests
eureka.port=7001
#
##Virtual host name by which the clients identifies this service
eureka.vipAddress=${eureka.name}:${eureka.port}
#
##For eureka clients running in eureka server, it needs to connect to servers in other zones
eureka.preferSameZone=false
#
## Don't register locally running instances.
eureka.registration.enabled=false
#
#
## Loading Filters
zuul.filters.root=zuul-sample/src/main/groovy/com/netflix/zuul/sample/filters
zuul.filters.locations=${zuul.filters.root}/inbound,${zuul.filters.root}/outbound,${zuul.filters.root}/endpoint
zuul.filters.packages=com.netflix.zuul.filters.common
#
#
#### Load balancing backends with Eureka

eureka.shouldUseDns=false
eureka.eurekaServer.context=eureka
eureka.eurekaServer.domainName=localhost
eureka.eurekaServer.gzipContent=true
#
eureka.serviceUrl.default=http://${eureka.eurekaServer.domainName}:8761/${eureka.eurekaServer.context}
#
uaa.ribbon.NIWSServerListClassName=com.netflix.niws.loadbalancer.DiscoveryEnabledNIWSServerList
uaa.ribbon.DeploymentContextBasedVipAddresses=localhost:8761
#
#
#### Load balancing backends without Eureka
#
#eureka.shouldFetchRegistry=false
#
#api.ribbon.listOfServers=127.0.0.1:5000
#api.ribbon.client.NIWSServerListClassName=com.netflix.loadbalancer.ConfigurationBasedServerList
##api.ribbon.DeploymentContextBasedVipAddresses=api-test.netflix.net:7001
#
#
#
#
## This has to be the last line
#@next=application-${@environment}.properties



#
##-------------------------
#
#
#
#
#
#
#
#
#
#### Instance env settings
#
#region=us-east-1
#environment=test
#
### Eureka instance registration for this app
#
##Name of the application to be identified by other services
#eureka.name=zuul
#
##The port where the service will be running and serving requests
#eureka.port=8761
#
##Virtual host name by which the clients identifies this service
#eureka.vipAddress=${eureka.name}:${eureka.port}
#
##For eureka clients running in eureka server, it needs to connect to servers in other zones
#eureka.preferSameZone=false
#
##Don't register locally running instances.
#eureka.registration.enabled=false
#
## Loading Filters
#zuul.filters.root=zuul-sample/src/main/groovy/com/netflix/zuul/sample/filters
#zuul.filters.locations=${zuul.filters.root}/inbound,${zuul.filters.root}/outbound,${zuul.filters.root}/endpoint
#zuul.filters.packages=com.netflix.zuul.filters.common
#
###########################################
### Everything above included in the sample.
### Everything below added by me.
###########################################
#
#
#uaa.ribbon.listOfServers=127.0.0.1:5000
#uaa.ribbon.client.NIWSServerListClassName=com.netflix.loadbalancer.ConfigurationBasedServerList
#uaa.ribbon.ConnectTimeout=67000000
#uaa.ribbon.ReadTimeout=68000000
#uaa.ribbon.ConnIdleEvictTimeMilliSeconds=340000000      //客服端连接可以保留到下次使用的生命时间
#
#insights.ribbon.listOfServers=127.0.0.1:6000
#insights.ribbon.client.NIWSServerListClassName=com.netflix.loadbalancer.ConfigurationBasedServerList
#
#path.ribbon.listOfServers=127.0.0.1:7000
#path.ribbon.client.NIWSServerListClassName=com.netflix.loadbalancer.ConfigurationBasedServerList
##path.ribbon.DeploymentContextBasedVipAddresses=127.0.0.1:8888
#
#
#eureka.validateInstanceId=false
#eureka.shouldFetchRegistry=false
#
## Netty configuration connection
#path.netty.client.TcpKeepAlive=false                // default: false
#path.netty.client.TcpNoDelay=false                  // default: false
#path.netty.client.WriteBufferHighWaterMark=32768    // default: 32 * 1024
#path.netty.client.WriteBufferLowWaterMark=8192    // default: 8 * 1024
#path.netty.client.AutoRead=false                    // default: false
#
#zuul.server.port.main=9090
#zuul.host.socket-timeout-millis=51000000
#zuul.host.connect-timeout-millis=55000000
#server.http.request.read.timeout = 61000000
##server.connection.idle.timeout = 6600000000000000000           //服务端的一个链接超时时间
#server.connection.idle.timeout = 630000000000  //服务端的一个链接超时时间
#
#
#
